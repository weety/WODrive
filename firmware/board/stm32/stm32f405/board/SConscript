import os
import rtconfig
from building import *

Import('SDK_LIB')

cwd = GetCurrentDir()

# add general drivers
src = Split('''
board.c
CubeMX_Config/Src/stm32f4xx_hal_msp.c
CubeMX_Config/Src/adc.c
CubeMX_Config/Src/can.c
CubeMX_Config/Src/dma.c
CubeMX_Config/Src/gpio.c
CubeMX_Config/Src/i2c.c
CubeMX_Config/Src/spi.c
CubeMX_Config/Src/tim.c
CubeMX_Config/Src/usb_device.c
CubeMX_Config/Src/usbd_cdc_if.c
CubeMX_Config/Src/usbd_conf.c
CubeMX_Config/Src/usbd_desc.c
''')

src += Split('''
CubeMX_Config/Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Src/usbd_cdc.c
CubeMX_Config/Middlewares/ST/STM32_USB_Device_Library/Core/Src/usbd_core.c
CubeMX_Config/Middlewares/ST/STM32_USB_Device_Library/Core/Src/usbd_ctlreq.c
CubeMX_Config/Middlewares/ST/STM32_USB_Device_Library/Core/Src/usbd_ioreq.c
''')

path =  [cwd]
path += [cwd + '/CubeMX_Config/Inc']
path += [cwd + '/CubeMX_Config/Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc',
        cwd + '/CubeMX_Config/Middlewares/ST/STM32_USB_Device_Library/Core/Inc']

startup_path_prefix = SDK_LIB

if rtconfig.CROSS_TOOL == 'gcc':
    src += [startup_path_prefix + '/STM32F4xx_HAL/CMSIS/Device/ST/STM32F4xx/Source/Templates/gcc/startup_stm32f405xx.s']
elif rtconfig.CROSS_TOOL == 'keil':
    src += [startup_path_prefix + '/STM32F4xx_HAL/CMSIS/Device/ST/STM32F4xx/Source/Templates/arm/startup_stm32f405xx.s']
elif rtconfig.CROSS_TOOL == 'iar':
    src += [startup_path_prefix + '/STM32F4xx_HAL/CMSIS/Device/ST/STM32F4xx/Source/Templates/iar/startup_stm32f405xx.s']

# STM32F405xx) || STM32F415xx) || STM32F407xx) || STM32F417xx)
# STM32F427xx) || STM32F437xx) || STM32F429xx) || STM32F439xx)
# STM32F401xC) || STM32F401xE) || STM32F410Tx) || STM32F410Cx)
# STM32F410Rx) || STM32F411xE) || STM32F446xx) || STM32F469xx)
# STM32F479xx) || STM32F412Cx) || STM32F412Rx) || STM32F412Vx)
# STM32F412Zx) || STM32F413xx) || STM32F423xx)
# You can select chips from the list above
CPPDEFINES = ['STM32F405xx']
group = DefineGroup('Drivers', src, depend = [''], CPPPATH = path, CPPDEFINES = CPPDEFINES)

Return('group')
